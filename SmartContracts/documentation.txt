This docuent provides the explanation and data flow of the Pub-Sub project.
Initially, in order to write the smart-contracts we assume that an user who is logging in to the application will get an user/Person Id after successful authentication with the database. This ID will act as Pid when he is functioning as publisher and as sub_id when he is functioning as a subscriber. We will have an active user account on ethereum platform (Metamusk or Ganashe) and that address will be available to him. To add an additional function of a central authority we introduce a manager also. Manager's job is to deploy to maintain the mapping of Publisher and User with their data. Whenever any user registers himself then he gets hold of manager address which is needed for invoking other transanctions.
publisher_ids.sol provides the manager functionality. He deploys this smart contract and updates the mapping between publisher id and his address which can be auto verified by the subscriber at a later stage. 
publisher.sol provides the publisher's functionality where contract named manager maintains the mapping between publisher and subscriber with their IDs. Also maintains the array of structs containing the publishers info.
The functions under this smart contracts are describede below.
Create_sub():  This function is basically allows a publisher to add a new subscriber and give him access to all the hashes of the files uploaded on that perticular topic.
unsubscribe(): This function terminates a subscribers access to the publisher queue of that topic as publisher removes him from the array of subscribers he maintain on the blockchain resulting in failing in verification part.
indexOf(): This is an internal function to unsubscribe function which is called to get the index of the subscriber being unsubscribed.
hashgen(): This function will be done at application level where a file hash will be generated and then will be signed digitally by the publisher and then will be given to the function to update it on the blockchain. However, at a later the same digital signature will be verified by using the public key of the publisher using smart contract (This part is pending now).For simulation purpose it takes a string as input and generates the hash and updates in the hash_files[] array on the chain. This function also calls the updatepd() function to update the publishers data on the blockchain. So this is the function where user has to pass the informations by clicking on a button in the application.
updatefiles(): This function update the hashes of the files he uploads in the blockchain and keeps a record that how many files are uploaded.
numberofsubs(): This function keeps track of how many subscribers are added to each publisher
verification(): This function is internal to the updatepd function. This verification is required to keep a check that only authenticated user/person can have the authority to update access the info available in the blockchain.
